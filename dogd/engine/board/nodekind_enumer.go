// Code generated by "enumer -type=NodeKind"; DO NOT EDIT.

//
package board

import (
	"fmt"
)

const _NodeKindName = "KindNormalKindStartKindFinishKindHome"

var _NodeKindIndex = [...]uint8{0, 10, 19, 29, 37}

func (i NodeKind) String() string {
	if i < 0 || i >= NodeKind(len(_NodeKindIndex)-1) {
		return fmt.Sprintf("NodeKind(%d)", i)
	}
	return _NodeKindName[_NodeKindIndex[i]:_NodeKindIndex[i+1]]
}

var _NodeKindValues = []NodeKind{0, 1, 2, 3}

var _NodeKindNameToValueMap = map[string]NodeKind{
	_NodeKindName[0:10]:  0,
	_NodeKindName[10:19]: 1,
	_NodeKindName[19:29]: 2,
	_NodeKindName[29:37]: 3,
}

// NodeKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeKindString(s string) (NodeKind, error) {
	if val, ok := _NodeKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeKind values", s)
}

// NodeKindValues returns all values of the enum
func NodeKindValues() []NodeKind {
	return _NodeKindValues
}

// IsANodeKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeKind) IsANodeKind() bool {
	for _, v := range _NodeKindValues {
		if i == v {
			return true
		}
	}
	return false
}
