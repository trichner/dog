// Code generated by "enumer -type=Suit"; DO NOT EDIT.

//
package deck

import (
	"fmt"
)

const _SuitName = "SuitNoneSuitHeartsSuitSpadesSuitDiamondsSuiteClubs"

var _SuitIndex = [...]uint8{0, 8, 18, 28, 40, 50}

func (i Suit) String() string {
	if i < 0 || i >= Suit(len(_SuitIndex)-1) {
		return fmt.Sprintf("Suit(%d)", i)
	}
	return _SuitName[_SuitIndex[i]:_SuitIndex[i+1]]
}

var _SuitValues = []Suit{0, 1, 2, 3, 4}

var _SuitNameToValueMap = map[string]Suit{
	_SuitName[0:8]:   0,
	_SuitName[8:18]:  1,
	_SuitName[18:28]: 2,
	_SuitName[28:40]: 3,
	_SuitName[40:50]: 4,
}

// SuitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SuitString(s string) (Suit, error) {
	if val, ok := _SuitNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Suit values", s)
}

// SuitValues returns all values of the enum
func SuitValues() []Suit {
	return _SuitValues
}

// IsASuit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Suit) IsASuit() bool {
	for _, v := range _SuitValues {
		if i == v {
			return true
		}
	}
	return false
}
