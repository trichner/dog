// Code generated by "enumer -type=Rank"; DO NOT EDIT.

//
package deck

import (
	"fmt"
)

const _RankName = "RankNoneRankAceRankTwoRankThreeRankFourRankFiveRankSixRankSevenRankEightRankNineRankTenRankJackRankQueenRankKingRankJoker"

var _RankIndex = [...]uint8{0, 8, 15, 22, 31, 39, 47, 54, 63, 72, 80, 87, 95, 104, 112, 121}

func (i Rank) String() string {
	if i < 0 || i >= Rank(len(_RankIndex)-1) {
		return fmt.Sprintf("Rank(%d)", i)
	}
	return _RankName[_RankIndex[i]:_RankIndex[i+1]]
}

var _RankValues = []Rank{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

var _RankNameToValueMap = map[string]Rank{
	_RankName[0:8]:     0,
	_RankName[8:15]:    1,
	_RankName[15:22]:   2,
	_RankName[22:31]:   3,
	_RankName[31:39]:   4,
	_RankName[39:47]:   5,
	_RankName[47:54]:   6,
	_RankName[54:63]:   7,
	_RankName[63:72]:   8,
	_RankName[72:80]:   9,
	_RankName[80:87]:   10,
	_RankName[87:95]:   11,
	_RankName[95:104]:  12,
	_RankName[104:112]: 13,
	_RankName[112:121]: 14,
}

// RankString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RankString(s string) (Rank, error) {
	if val, ok := _RankNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Rank values", s)
}

// RankValues returns all values of the enum
func RankValues() []Rank {
	return _RankValues
}

// IsARank returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Rank) IsARank() bool {
	for _, v := range _RankValues {
		if i == v {
			return true
		}
	}
	return false
}
