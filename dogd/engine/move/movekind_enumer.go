// Code generated by "enumer -type=MoveKind"; DO NOT EDIT.

//
package move

import (
	"fmt"
)

const _MoveKindName = "MoveForwardMoveReverseMoveSwapMoveStart"

var _MoveKindIndex = [...]uint8{0, 11, 22, 30, 39}

func (i MoveKind) String() string {
	if i < 0 || i >= MoveKind(len(_MoveKindIndex)-1) {
		return fmt.Sprintf("MoveKind(%d)", i)
	}
	return _MoveKindName[_MoveKindIndex[i]:_MoveKindIndex[i+1]]
}

var _MoveKindValues = []MoveKind{0, 1, 2, 3}

var _MoveKindNameToValueMap = map[string]MoveKind{
	_MoveKindName[0:11]:  0,
	_MoveKindName[11:22]: 1,
	_MoveKindName[22:30]: 2,
	_MoveKindName[30:39]: 3,
}

// MoveKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MoveKindString(s string) (MoveKind, error) {
	if val, ok := _MoveKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MoveKind values", s)
}

// MoveKindValues returns all values of the enum
func MoveKindValues() []MoveKind {
	return _MoveKindValues
}

// IsAMoveKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MoveKind) IsAMoveKind() bool {
	for _, v := range _MoveKindValues {
		if i == v {
			return true
		}
	}
	return false
}
